@page "/"
@using UploadingImagesToDatabaseWithApi.Shared
@inject HttpClient HttpClient

<div class="container">
    <EditForm Model="BuildingProblem" OnInvalidSubmit="UploadProblem">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="input">
            <label>Naam Residentie</label>
            <InputText @bind-Value="BuildingProblem.BuildingName"></InputText>
        </div>
        <div class="input">
            <label>Beschrijf het probleem</label>
            <InputTextArea @bind-Value="BuildingProblem.BuildingName"></InputTextArea>
        </div>

        <div class="input">
            <label>Upload images</label>
            <InputFile OnChange="OnFileChange" multiple></InputFile>
        </div>
        <div class="selected-images">

            @if (BuildingProblem.Images != null)
            {
                foreach (var img in BuildingProblem.Images)
                {
                    <img src="@img.Data" alt="image" />
                    <button @onclick="() => RemoveImage(img.Data)">X</button>
                }
            }
        </div>
        <div class="input">
            <label>Naam</label>
            <InputText @bind-Value="BuildingProblem.UserName"></InputText>
        </div>
        <div class="input">
            <label>Tel</label>
            <InputText @bind-Value="BuildingProblem.UserTelephone"></InputText>
        </div>
        <div class="input">
            <label>Email</label>
            <InputText @bind-Value="BuildingProblem.UserEmail"></InputText>
        </div>

        <button type="submit" @onclick="UploadProblem">Upload</button>
    </EditForm>
</div>

@code
{
    private QrBuildingProblem BuildingProblem { get; set; } = new();

    private async Task UploadProblem()
    {
        await HttpClient.PostAsJsonAsync("buildingproblem/uploadbuildingproblem", BuildingProblem);
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        const string format = "image/png";

        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            BuildingProblem.Images?.Add(new Image { Data = imageData });
        }
    }

    private void RemoveImage(string? imgData)
    {
        var imgToDelete = BuildingProblem.Images?.FirstOrDefault(i => i.Data == imgData);
        if (imgToDelete != null)
        {
            BuildingProblem.Images?.Remove(imgToDelete);
        }
    }
}


